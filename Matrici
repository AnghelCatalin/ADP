package matrix_Add_with_Thread;

import java.util.Random;

public class Matrix {

	static int n=10;
	static int[][] mat = new int[n][n];
	static int[][] mat2 = new int[n][n];
	static int[][] result = new int[n][n];
	static int[][] adunare = new int[n][n];

	public static void main(String [] args){

		Random rand = new Random();

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				mat[i][j]=rand.nextInt(2)+1;
			}
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				mat2[i][j]=rand.nextInt(2);
			}
		}

		try{
			Multiply multiply = new Multiply(n,n);

			for(int nr = 0; nr<n; nr++){
				MatrixMultiplier thread = new MatrixMultiplier(multiply);
				Thread th = new Thread(thread);
				th.start();
				th.join();
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("\n\nResult:");
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(result[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println("\nAdunare\n");
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(adunare[i][j]+" ");
			}
			System.out.println();
		}
		
	}

}
   class Multiply extends Matrix {

	   private int i;
	   private int j;
	   private int chance;

	   		public Multiply(int i, int j){
	   			this.i=i;
	   			this.j=j;
	   			chance=0;
	   		}

	   		public synchronized void multiplyMatrix(){

	   			int sum=0;
	   			int a=0;
	   			int adn=0;
	   			for(a=0;a<i;a++){
	   				sum=0;
	   				for(int b=0;b<j;b++){
	   					sum=sum+mat[chance][b]*mat2[b][a];
	   				}
	   				result[chance][a]=sum;
	   			}
	   			for(int x=0; x<i; x++){
	   				for(int y=0; y<j; y++){
	   					
	   					adn=mat[x][y]+mat2[x][y];
	   					adunare[x][y]=adn;
	   				}
	   			}
	   			if(chance>=i)
	   				return;
	   			chance++;
	   			
	   			
	   		}
   }

   class MatrixMultiplier implements Runnable {

    	 private final Multiply mul;

    	 public MatrixMultiplier(Multiply mul){
    		 this.mul=mul;
    	 }

	public void run() {
    	mul.multiplyMatrix();
	}
   	
   
   
   
   }
